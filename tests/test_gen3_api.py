import pytest
from app import app
from fastapi.testclient import TestClient

from app.filter_generator import FILTER_MAP


@pytest.fixture
def client():
    with TestClient(app) as client:
        return client


def test_create_gen3_access(client):
    missing_data = {}
    response = client.post("/access/token", json=missing_data)
    result = response.json()
    assert response.status_code == 400
    assert result["detail"] == "Missing field in the request body"

    dummy_data = {
        "identity": "dummyemail@gmail.com>machine_id"
    }
    response = client.post("/access/token", json=dummy_data)
    result = response.json()
    assert response.status_code == 200
    assert result["identity"] == dummy_data["identity"]


def test_revoke_gen3_access(client):
    dummy_data = {
        "identity": "dummyemail@gmail.com>machine_id"
    }
    response = client.post("/access/token", json=dummy_data)
    dummy_token = response.json()

    response = client.delete(
        "/access/revoke", headers={"Authorization": f"Bearer {dummy_token['access_token']}"})
    result = response.json()
    assert response.status_code == 401
    assert result["detail"] == "Unable to remove default access authority"


def test_get_gen3_record(client):
    dummy_data = {
        "identity": "dummyemail@gmail.com>machine_id"
    }
    response = client.post("/access/token", json=dummy_data)
    dummy_token = response.json()

    UUID = "5b9ae1bd-e780-4869-a458-b3422084c480"
    response = client.get(
        f"/record/{UUID}", headers={"Authorization": f"Bearer {dummy_token['access_token']}"})
    result = response.json()
    assert response.status_code == 200
    assert len(result) == 1
    assert result["record"]["submitter_id"] == "dataset-217-version-2-dataset_description"

    UUID = "5b9ae1bd-e780-4869-a458-fakeuuidsuffix"
    response = client.get(
        f"/record/{UUID}", headers={"Authorization": f"Bearer {dummy_token['access_token']}"})
    result = response.json()
    assert response.status_code == 404
    assert result["detail"] == f"Unable to find {UUID} and check if the correct project or uuid is used"


def test_get_gen3_graphql_query(client):
    dummy_data = {
        "identity": "dummyemail@gmail.com>machine_id"
    }
    response = client.post("/access/token", json=dummy_data)
    dummy_token = response.json()

    DATASET_ID = "dataset-217-version-2"
    pass_case = {
        "node": "experiment_query",
        "filter": {
            "submitter_id": [DATASET_ID]
        },
        "search": ""
    }
    response = client.post("/graphql/query/?mode=data", json=pass_case,
                           headers={"Authorization": f"Bearer {dummy_token['access_token']}"})
    result = response.json()
    assert response.status_code == 200
    assert result["data"]["submitter_id"] == DATASET_ID

    response = client.post("/graphql/query/?mode=detail", json=pass_case,
                           headers={"Authorization": f"Bearer {dummy_token['access_token']}"})
    result = response.json()
    assert response.status_code == 200
    assert result["detail"]["submitter_id"] == DATASET_ID
    assert result["facet"] == {
        "Anatomical structure": ["Brainstem"],
        "Mime type": ["Scaffold"]
    }

    response = client.post("/graphql/query/?mode=facet", json=pass_case,
                           headers={"Authorization": f"Bearer {dummy_token['access_token']}"})
    result = response.json()
    assert response.status_code == 200
    assert len(result["facet"]) == 2
    assert result["facet"][0] == {
        "facet": "Brainstem",
        "term": "Anatomical structure",
        "facetPropPath": "dataset_description_filter>study_organ_system"
    }

    missing_data = {}
    response = client.post("/graphql/query/?mode=data", json=missing_data,
                           headers={"Authorization": f"Bearer {dummy_token['access_token']}"})
    result = response.json()
    assert response.status_code == 400
    assert result["detail"] == "Missing one or more fields in the request body"

    wrong_node = {
        "node": "fakenode",
    }
    response = client.post("/graphql/query/?mode=data", json=wrong_node,
                           headers={"Authorization": f"Bearer {dummy_token['access_token']}"})
    result = response.json()
    assert response.status_code == 404
    assert result["detail"] == "GraphQL query cannot be generated by sgqlc"

    DATASET_ID2 = "dataset-46-version-2"
    wrong_filter = {
        "node": "experiment_query",
        "filter": {
            "submitter_id": [DATASET_ID, DATASET_ID2]
        },
        "search": ""
    }
    response = client.post("/graphql/query/?mode=detail", json=wrong_filter,
                           headers={"Authorization": f"Bearer {dummy_token['access_token']}"})
    result = response.json()
    assert response.status_code == 400
    assert result["detail"] == "Mode detail only available when query one dataset in experiment node"


def test_get_gen3_graphql_pagination(client):
    dummy_data = {
        "identity": "dummyemail@gmail.com>machine_id"
    }
    response = client.post("/access/token", json=dummy_data)
    dummy_token = response.json()

    filter_pass_case = {
        "filter": {
            "manifest_filter>additional_types": [
                "Plot"
            ],
            "case_filter>species": [
                "Rat"
            ],
            "case_filter>sex": [
                "Male"
            ]
        }
    }
    response = client.post("/graphql/pagination/", json=filter_pass_case,
                           headers={"Authorization": f"Bearer {dummy_token['access_token']}"})
    result = response.json()
    assert response.status_code == 200
    assert result["items"][0]["datasetId"] == "dataset-46-version-2"
    assert result["total"] == 1

    order_pass_case = {
        "order": "Title(desc)"
    }
    response = client.post("/graphql/pagination/?search=", json=order_pass_case,
                           headers={"Authorization": f"Bearer {dummy_token['access_token']}"})
    result = response.json()
    assert response.status_code == 200
    assert result["items"][13]["datasetId"] == "dataset-46-version-2"

    search_pass_case = {}
    response = client.post("/graphql/pagination/?search=rats", json=search_pass_case,
                           headers={"Authorization": f"Bearer {dummy_token['access_token']}"})
    result = response.json()
    assert response.status_code == 200
    assert result["items"][0]["datasetId"] == "dataset-46-version-2"
    assert result["total"] == 1

    wrong_search = {}
    response = client.post("/graphql/pagination/?search=dog", json=wrong_search,
                           headers={"Authorization": f"Bearer {dummy_token['access_token']}"})
    result = response.json()
    assert response.status_code == 404
    assert result["detail"] == "There is no matched content in the database"

    wrong_facet = {
        "filter": {
            "manifest_filter>additional_types": [
                "Image"
            ],
        }
    }
    response = client.post("/graphql/pagination/", json=wrong_facet,
                           headers={"Authorization": f"Bearer {dummy_token['access_token']}"})
    result = response.json()
    assert response.status_code == 400
    assert result["detail"] == "Invalid or unauthorized facet passed in"

    wrong_order = {
        "order": "Author(asc)"
    }
    response = client.post("/graphql/pagination/", json=wrong_order,
                           headers={"Authorization": f"Bearer {dummy_token['access_token']}"})
    result = response.json()
    assert response.status_code == 400
    assert result["detail"] == f"{wrong_order['order']} order option not provided"


def test_get_gen3_filter(client):
    dummy_data = {
        "identity": "dummyemail@gmail.com>machine_id"
    }
    response = client.post("/access/token", json=dummy_data)
    dummy_token = response.json()

    response = client.get("/filter/?sidebar=true",
                          headers={"Authorization": f"Bearer {dummy_token['access_token']}"})
    assert response.status_code == 200
    assert bool(FILTER_MAP["MAPPED_AGE_CATEGORY"]["facets"]) == True
    assert bool(FILTER_MAP["MAPPED_STUDY_ORGAN_SYSTEM"]["facets"]) == True
    assert bool(FILTER_MAP["MAPPED_SEX"]["facets"]) == True
    assert bool(FILTER_MAP["MAPPED_ADDITIONAL_TYPES"]["facets"]) == True
    assert bool(FILTER_MAP["MAPPED_SPECIES"]["facets"]) == True
    assert bool(FILTER_MAP["MAPPED_PROJECT_ID"]["facets"]) == True

    response = client.get("/filter/?sidebar=false",
                          headers={"Authorization": f"Bearer {dummy_token['access_token']}"})
    assert response.status_code == 200
    assert bool(FILTER_MAP["MAPPED_AGE_CATEGORY"]["facets"]) == True
    assert bool(FILTER_MAP["MAPPED_STUDY_ORGAN_SYSTEM"]["facets"]) == True
    assert bool(FILTER_MAP["MAPPED_SEX"]["facets"]) == True
    assert bool(FILTER_MAP["MAPPED_ADDITIONAL_TYPES"]["facets"]) == True
    assert bool(FILTER_MAP["MAPPED_SPECIES"]["facets"]) == True
    assert bool(FILTER_MAP["MAPPED_PROJECT_ID"]["facets"]) == True
